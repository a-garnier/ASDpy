# -*- coding: utf-8 -*-
"""02_convert_to_spectrograms

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oVG2m5RSopn7ePaQMZOBc6DDQZ3aN8mi
"""

# -*- coding: utf-8 -*-
"""
    Convert wav to spectrograms
    Automatic script designed to convert each .wav sound to a png spectrogram,
    black and white image and 128x64 pixels resolution
    Images are saved in a directory suffixed by '_png_128_64' at the same place of sound directories
"""

import os
from os import listdir
from os.path import isfile, join
import matplotlib.pyplot as pltb
import ASDpy.utils as utils

# https://librosa.org/doc/latest/search.html?q=export&check_keywords=yes&area=default#
import librosa
import librosa.display
import matplotlib.pyplot as plt
import numpy as np
import skimage.io
import os
from pathlib import Path

from joblib import dump

def scale_minmax(X, min=0.0, max=1.0):
    X_std = (X - X.min()) / (X.max() - X.min())
    X_scaled = X_std * (max - min) + min
    return X_scaled


class SoundFile:
    """ 
    ----------
    SoundFile class contains informations about one sound related to a wav file

    ----------
    Parameters:
        name_file : full path + name of the file ('./fan/train/normal_id_00_00000000.wav')
        out_folder_png: name of output folder in order to save the spectograms as pngs
    """
    # settings
    # hop_length = 512 # number of samples per time-step in spectrogram
    # n_mels = 64 # number of bins in spectrogram. Height of image
    # time_steps = 384 # number of time-steps. Width of image

    
    def __init__(self, nameFile, out_folder_png, image_width=0):
        #print('init the audio file:', nameFile)
        self.nameFile = nameFile
        self.out_folder_png = out_folder_png
        self.samples, self.sample_rate = librosa.load(nameFile, sr=None)
        # self.samples : (160000,) complex matrix
        # self.sample_rate : 16000

        if image_width > 0:
          # to have fixed width image
          hop_length = int(self.samples.shape[0]/image_width)
          #print("hop_length : ", hop_length)

          self.sgram = librosa.stft(self.samples, hop_length=hop_length+1)
        else:
          self.sgram = librosa.stft(self.samples)

        #print("self.sgram.shape", self.sgram.shape)
        # self.sgram.shape : (1025, 313) matrix
        # (f,t) => f = frequency, t = time
        #print(self.sgram)
        # n_fft=2000 => (1001, 321)
        # n_fft=500 => (251, 1281)
        # n_fft=32 => (17, 200001)
        
    def exportMelSpectrogram(self, image_height=128): # black and white with skimage
        # mels = librosa.feature.melspectrogram(y=y, sr=sr, n_mels=n_mels,
        #                                     n_fft=hop_length*2, hop_length=hop_length)
        
        p = Path(self.nameFile)
        
        sgram_mag, _ = librosa.magphase(self.sgram)
        mels = librosa.feature.melspectrogram(S=sgram_mag, sr=self.sample_rate, n_mels=image_height)
        # mel_sgram = librosa.amplitude_to_db(mel_scale_sgram, ref=np.min)

        # save raw matrix
        nameMels = self.out_folder_png + p.stem + '_mels.joblib'
        dump(mels, nameMels, compress=True)

        mels = np.log(mels + 1e-9) # add small number to avoid log(0)
    
        #print("mels.shape :", mels.shape) # (128, 313)
        # min-max scale to fit inside 8-bit range
        img = scale_minmax(mels, 0, 255).astype(np.uint8)
        img = np.flip(img, axis=0) # put low frequencies at the bottom in image
        img = 255-img # invert. make black==more energy
    
        # save as PNG in out_folder_png
        # namePng = os.path.splitext(self.nameFile)[0] + '.png'
        namePng = self.out_folder_png + p.stem + '.png' #same name for the png file as wav
        skimage.io.imsave(namePng, img)

        
        

    def showMelSpectrogram(self):
         # use the decibel scale to get the final Mel Spectrogram - v2
        sgram_mag, _ = librosa.magphase(self.sgram)
        mel_scale_sgram = librosa.feature.melspectrogram(S=sgram_mag, sr=self.sample_rate)
        mel_sgram = librosa.amplitude_to_db(mel_scale_sgram, ref=np.min)
        librosa.display.specshow(mel_sgram, sr=self.sample_rate, x_axis='time', y_axis='mel')
        # plt.colorbar(format='%+2.0f dB'); # vertical legend

def convertSound2ImageDir(soundFolder, imageFolder):

    if not os.path.exists(imageFolder):
        os.makedirs(imageFolder)

    wavfiles = [f for f in listdir(soundFolder) if isfile(join(soundFolder, f))]
    # wavfiles.remove('.DS_Store')
    for f in wavfiles:
        if f[-4:] != '.wav':
            # ignore non .wav files
            continue

        print(f)
        s = SoundFile(soundFolder + f, imageFolder)
        s.exportMelSpectrogram()
        # s.showMelSpectrogram()
        # plt.show()

def convertSound2ImageDirV2(soundFolder, imageFolder, width=128, height=64):

    if not os.path.exists(imageFolder):
        os.makedirs(imageFolder)

    wavfiles = [f for f in listdir(soundFolder) if isfile(join(soundFolder, f))]
    # wavfiles.remove('.DS_Store')
    for f in wavfiles:
        if f[-4:] != '.wav':
            # ignore non .wav files
            continue

        print(f)
        s = SoundFile(soundFolder + f, imageFolder, image_width=width)
        s.exportMelSpectrogram(image_height=height)
        # s.showMelSpectrogram()
        # plt.show()

# # convert to images of automatic size
# #machines = ['fan', 'pump', 'slider', 'ToyCar', 'ToyConveyor', 'valve']
# machines = ['fan']
# sets = ['train', 'test']
#
# # dataFolder = '/drive/MyDrive/asdpy/data/original/dc2020task2'
# dataFolder = utils.dc2020task2
#
# for machine in machines:
#     for s in sets:
#         # example : '../data/fan/train/'
#         soundFolder = dataFolder+'/'+machine+'/'+s+'/'
#
#         # example : '../data/fan/train_png/'
#         imageFolder = dataFolder+'/'+machine+'/'+s+'_png/'
#
#         print("Convert directory ", soundFolder)
#
#         convertSound2ImageDir(soundFolder, imageFolder)

# convert to images of fixed size
machines = ['fan', 'pump', 'slider', 'ToyCar', 'ToyConveyor', 'valve']
sets = ['train', 'test']

# dataFolder = '/drive/MyDrive/asdpy/data/original/dc2020task2'
dataFolder = utils.dc2020task2

for machine in machines:
    for s in sets:
        # example : '../data/fan/train/'
        soundFolder = dataFolder+'/'+machine+'/'+s+'/'

        # example : '../data/fan/train_png/'
        imageFolder = dataFolder+'/'+machine+'/'+s+'_png_128_64/'

        print("Convert directory ", soundFolder)

        convertSound2ImageDirV2(soundFolder, imageFolder, width=128, height=64)